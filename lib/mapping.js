// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports = function() {
    var store;
    store = Object.create(null);
    return {
      get: function(key) {
        return store["~" + key];
      },
      set: function(key, value) {
        return store["~" + key] = value;
      },
      pushValue: function(key, value) {
        if (typeof store["~" + key] === 'undefined' || !Array.isArray(store["~" + key])) {
          throw new Error('<Mapping.pushValue> Value of key "' + key + '" is not an array!');
        }

        return store["~" + key].push(value);
      },
      "delete": function(key) {
        return delete store["~" + key];
      },
      keys: function() {
        var key, value, _results;
        _results = [];
        for (key in store) {
          value = store[key];
          _results.push(key.slice(1));
        }
        return _results;
      },
      values: function() {
        var key, value, _results;
        _results = [];
        for (key in store) {
          value = store[key];
          _results.push(value);
        }
        return _results;
      },
      hasKey: function(key) {
        return __indexOf.call(this.keys(), key) >= 0;
      },
      hasValue: function(value) {
        return __indexOf.call(this.values(), value) >= 0;
      },
      size: function() {
        return this.keys().length;
      },
      map: function(f) {
        var key, value, _results;
        _results = [];
        for (key in store) {
          value = store[key];
          _results.push(f(key.slice(1), value));
        }
        return _results;
      }
    };
  };

}).call(this);
